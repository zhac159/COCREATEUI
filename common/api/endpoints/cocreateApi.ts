/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * CoCreateAPI
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  AssetCreateDTO,
  AssetDTO,
  AssetUpdateDTO,
  EnquiryConfirmDTO,
  EnquiryCreateDTO,
  EnquiryDTO,
  LoginResponseDTO,
  MessageCreateDTO,
  MessageDTO,
  PortofolioContentCreateDTO,
  PortofolioContentDTO,
  PortofolioContentGroupUpdateDTO,
  PortofolioContentUpdateDTO,
  PrepareUploadDTO,
  PrepareUploadResponseDTO,
  ProjectCreateDTO,
  ProjectDTO,
  ProjectRoleCreateDTO,
  ProjectRoleDTO,
  ProjectRoleUpdateDTO,
  ProjectWithMatchingRolesListDTO,
  SkillDTO,
  SkillUpdateDTO,
  UserCreateDTO,
  UserDTO,
  UserGetMatchingProjectRolesDTO,
  UserLocationDTO,
  UserLocationUpdateDTO,
  UserLoginDTO,
  UserPortofolioDTO,
  UserPortofolioUpdateDTO,
  UserPublicKeyUpdateDTO,
  UserUpdateDTO
} from '../model'
import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';



export const postApiAsset = (
    assetCreateDTO: AssetCreateDTO,
 ) => {
      
      
      return customInstance<AssetDTO>(
      {url: `/api/Asset`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: assetCreateDTO
    },
      );
    }
  


export const getPostApiAssetMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAsset>>, TError,{data: AssetCreateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAsset>>, TError,{data: AssetCreateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAsset>>, {data: AssetCreateDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAsset(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiAssetMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAsset>>>
    export type PostApiAssetMutationBody = AssetCreateDTO
    export type PostApiAssetMutationError = ErrorType<unknown>

    export const usePostApiAsset = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAsset>>, TError,{data: AssetCreateDTO}, TContext>, }
) => {

      const mutationOptions = getPostApiAssetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiAsset = (
    assetUpdateDTO: AssetUpdateDTO,
 ) => {
      
      
      return customInstance<AssetDTO>(
      {url: `/api/Asset`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: assetUpdateDTO
    },
      );
    }
  


export const getPutApiAssetMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAsset>>, TError,{data: AssetUpdateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiAsset>>, TError,{data: AssetUpdateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiAsset>>, {data: AssetUpdateDTO}> = (props) => {
          const {data} = props ?? {};

          return  putApiAsset(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiAssetMutationResult = NonNullable<Awaited<ReturnType<typeof putApiAsset>>>
    export type PutApiAssetMutationBody = AssetUpdateDTO
    export type PutApiAssetMutationError = ErrorType<unknown>

    export const usePutApiAsset = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAsset>>, TError,{data: AssetUpdateDTO}, TContext>, }
) => {

      const mutationOptions = getPutApiAssetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiAssetId = (
    id: number,
 ) => {
      
      
      return customInstance<Boolean>(
      {url: `/api/Asset/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiAssetIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAssetId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiAssetId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiAssetId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiAssetId(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiAssetIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiAssetId>>>
    
    export type DeleteApiAssetIdMutationError = ErrorType<unknown>

    export const useDeleteApiAssetId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiAssetId>>, TError,{id: number}, TContext>, }
) => {

      const mutationOptions = getDeleteApiAssetIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiEnquiryCreate = (
    enquiryCreateDTO: EnquiryCreateDTO,
 ) => {
      
      
      return customInstance<EnquiryDTO>(
      {url: `/api/Enquiry/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: enquiryCreateDTO
    },
      );
    }
  


export const getPostApiEnquiryCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEnquiryCreate>>, TError,{data: EnquiryCreateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiEnquiryCreate>>, TError,{data: EnquiryCreateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEnquiryCreate>>, {data: EnquiryCreateDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiEnquiryCreate(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiEnquiryCreateMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEnquiryCreate>>>
    export type PostApiEnquiryCreateMutationBody = EnquiryCreateDTO
    export type PostApiEnquiryCreateMutationError = ErrorType<unknown>

    export const usePostApiEnquiryCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEnquiryCreate>>, TError,{data: EnquiryCreateDTO}, TContext>, }
) => {

      const mutationOptions = getPostApiEnquiryCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiEnquiryConfirm = (
    enquiryConfirmDTO: EnquiryConfirmDTO,
 ) => {
      
      
      return customInstance<Boolean>(
      {url: `/api/Enquiry/confirm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: enquiryConfirmDTO
    },
      );
    }
  


export const getPostApiEnquiryConfirmMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEnquiryConfirm>>, TError,{data: EnquiryConfirmDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiEnquiryConfirm>>, TError,{data: EnquiryConfirmDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEnquiryConfirm>>, {data: EnquiryConfirmDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiEnquiryConfirm(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiEnquiryConfirmMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEnquiryConfirm>>>
    export type PostApiEnquiryConfirmMutationBody = EnquiryConfirmDTO
    export type PostApiEnquiryConfirmMutationError = ErrorType<unknown>

    export const usePostApiEnquiryConfirm = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEnquiryConfirm>>, TError,{data: EnquiryConfirmDTO}, TContext>, }
) => {

      const mutationOptions = getPostApiEnquiryConfirmMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiEnquirySendMessage = (
    messageCreateDTO: MessageCreateDTO,
 ) => {
      
      
      return customInstance<MessageDTO>(
      {url: `/api/Enquiry/send-message`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: messageCreateDTO
    },
      );
    }
  


export const getPostApiEnquirySendMessageMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEnquirySendMessage>>, TError,{data: MessageCreateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiEnquirySendMessage>>, TError,{data: MessageCreateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEnquirySendMessage>>, {data: MessageCreateDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiEnquirySendMessage(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiEnquirySendMessageMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEnquirySendMessage>>>
    export type PostApiEnquirySendMessageMutationBody = MessageCreateDTO
    export type PostApiEnquirySendMessageMutationError = ErrorType<unknown>

    export const usePostApiEnquirySendMessage = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEnquirySendMessage>>, TError,{data: MessageCreateDTO}, TContext>, }
) => {

      const mutationOptions = getPostApiEnquirySendMessageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiLogin = (
    userLoginDTO: UserLoginDTO,
 ) => {
      
      
      return customInstance<LoginResponseDTO>(
      {url: `/api/Login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userLoginDTO
    },
      );
    }
  


export const getPostApiLoginMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiLogin>>, TError,{data: UserLoginDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiLogin>>, TError,{data: UserLoginDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiLogin>>, {data: UserLoginDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiLogin(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiLogin>>>
    export type PostApiLoginMutationBody = UserLoginDTO
    export type PostApiLoginMutationError = ErrorType<unknown>

    export const usePostApiLogin = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiLogin>>, TError,{data: UserLoginDTO}, TContext>, }
) => {

      const mutationOptions = getPostApiLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiLoginRegister = (
    userCreateDTO: UserCreateDTO,
 ) => {
      
      
      return customInstance<LoginResponseDTO>(
      {url: `/api/Login/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCreateDTO
    },
      );
    }
  


export const getPostApiLoginRegisterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiLoginRegister>>, TError,{data: UserCreateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiLoginRegister>>, TError,{data: UserCreateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiLoginRegister>>, {data: UserCreateDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiLoginRegister(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiLoginRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postApiLoginRegister>>>
    export type PostApiLoginRegisterMutationBody = UserCreateDTO
    export type PostApiLoginRegisterMutationError = ErrorType<unknown>

    export const usePostApiLoginRegister = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiLoginRegister>>, TError,{data: UserCreateDTO}, TContext>, }
) => {

      const mutationOptions = getPostApiLoginRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiPortofolioContent = (
    portofolioContentCreateDTO: PortofolioContentCreateDTO,
 ) => {
      
      
      return customInstance<PortofolioContentDTO>(
      {url: `/api/PortofolioContent`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portofolioContentCreateDTO
    },
      );
    }
  


export const getPostApiPortofolioContentMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPortofolioContent>>, TError,{data: PortofolioContentCreateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiPortofolioContent>>, TError,{data: PortofolioContentCreateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPortofolioContent>>, {data: PortofolioContentCreateDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiPortofolioContent(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiPortofolioContentMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPortofolioContent>>>
    export type PostApiPortofolioContentMutationBody = PortofolioContentCreateDTO
    export type PostApiPortofolioContentMutationError = ErrorType<unknown>

    export const usePostApiPortofolioContent = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPortofolioContent>>, TError,{data: PortofolioContentCreateDTO}, TContext>, }
) => {

      const mutationOptions = getPostApiPortofolioContentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiPortofolioContent = (
    portofolioContentUpdateDTO: PortofolioContentUpdateDTO,
 ) => {
      
      
      return customInstance<PortofolioContentDTO>(
      {url: `/api/PortofolioContent`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: portofolioContentUpdateDTO
    },
      );
    }
  


export const getPutApiPortofolioContentMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiPortofolioContent>>, TError,{data: PortofolioContentUpdateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiPortofolioContent>>, TError,{data: PortofolioContentUpdateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiPortofolioContent>>, {data: PortofolioContentUpdateDTO}> = (props) => {
          const {data} = props ?? {};

          return  putApiPortofolioContent(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiPortofolioContentMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPortofolioContent>>>
    export type PutApiPortofolioContentMutationBody = PortofolioContentUpdateDTO
    export type PutApiPortofolioContentMutationError = ErrorType<unknown>

    export const usePutApiPortofolioContent = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiPortofolioContent>>, TError,{data: PortofolioContentUpdateDTO}, TContext>, }
) => {

      const mutationOptions = getPutApiPortofolioContentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiPortofolioContentGroup = (
    portofolioContentGroupUpdateDTO: PortofolioContentGroupUpdateDTO,
 ) => {
      
      
      return customInstance<PortofolioContentDTO>(
      {url: `/api/PortofolioContent/group`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: portofolioContentGroupUpdateDTO
    },
      );
    }
  


export const getPutApiPortofolioContentGroupMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiPortofolioContentGroup>>, TError,{data: PortofolioContentGroupUpdateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiPortofolioContentGroup>>, TError,{data: PortofolioContentGroupUpdateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiPortofolioContentGroup>>, {data: PortofolioContentGroupUpdateDTO}> = (props) => {
          const {data} = props ?? {};

          return  putApiPortofolioContentGroup(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiPortofolioContentGroupMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPortofolioContentGroup>>>
    export type PutApiPortofolioContentGroupMutationBody = PortofolioContentGroupUpdateDTO
    export type PutApiPortofolioContentGroupMutationError = ErrorType<unknown>

    export const usePutApiPortofolioContentGroup = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiPortofolioContentGroup>>, TError,{data: PortofolioContentGroupUpdateDTO}, TContext>, }
) => {

      const mutationOptions = getPutApiPortofolioContentGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiPortofolioContentId = (
    id: number,
 ) => {
      
      
      return customInstance<Boolean>(
      {url: `/api/PortofolioContent/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiPortofolioContentIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiPortofolioContentId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiPortofolioContentId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiPortofolioContentId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiPortofolioContentId(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiPortofolioContentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPortofolioContentId>>>
    
    export type DeleteApiPortofolioContentIdMutationError = ErrorType<unknown>

    export const useDeleteApiPortofolioContentId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiPortofolioContentId>>, TError,{id: number}, TContext>, }
) => {

      const mutationOptions = getDeleteApiPortofolioContentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiPrepare = (
    prepareUploadDTO: PrepareUploadDTO[],
 ) => {
      
      
      return customInstance<PrepareUploadResponseDTO>(
      {url: `/api/Prepare`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: prepareUploadDTO
    },
      );
    }
  


export const getPostApiPrepareMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPrepare>>, TError,{data: PrepareUploadDTO[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiPrepare>>, TError,{data: PrepareUploadDTO[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPrepare>>, {data: PrepareUploadDTO[]}> = (props) => {
          const {data} = props ?? {};

          return  postApiPrepare(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiPrepareMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPrepare>>>
    export type PostApiPrepareMutationBody = PrepareUploadDTO[]
    export type PostApiPrepareMutationError = ErrorType<unknown>

    export const usePostApiPrepare = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPrepare>>, TError,{data: PrepareUploadDTO[]}, TContext>, }
) => {

      const mutationOptions = getPostApiPrepareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiProject = (
    projectCreateDTO: ProjectCreateDTO,
 ) => {
      
      
      return customInstance<ProjectDTO>(
      {url: `/api/Project`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectCreateDTO
    },
      );
    }
  


export const getPostApiProjectMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProject>>, TError,{data: ProjectCreateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiProject>>, TError,{data: ProjectCreateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProject>>, {data: ProjectCreateDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiProject(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiProjectMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProject>>>
    export type PostApiProjectMutationBody = ProjectCreateDTO
    export type PostApiProjectMutationError = ErrorType<unknown>

    export const usePostApiProject = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProject>>, TError,{data: ProjectCreateDTO}, TContext>, }
) => {

      const mutationOptions = getPostApiProjectMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiProjectProjectId = (
    projectId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ProjectDTO>(
      {url: `/api/Project/${projectId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiProjectProjectIdQueryKey = (projectId: number,) => {
    return [`/api/Project/${projectId}`] as const;
    }

    
export const getGetApiProjectProjectIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiProjectProjectId>>, TError = ErrorType<unknown>>(projectId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiProjectProjectId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProjectProjectIdQueryKey(projectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProjectProjectId>>> = ({ signal }) => getApiProjectProjectId(projectId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(projectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProjectProjectId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiProjectProjectIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProjectProjectId>>>
export type GetApiProjectProjectIdQueryError = ErrorType<unknown>

export const useGetApiProjectProjectId = <TData = Awaited<ReturnType<typeof getApiProjectProjectId>>, TError = ErrorType<unknown>>(
 projectId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiProjectProjectId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiProjectProjectIdQueryOptions(projectId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiProjectRole = (
    projectRoleCreateDTO: ProjectRoleCreateDTO,
 ) => {
      
      
      return customInstance<ProjectRoleDTO>(
      {url: `/api/ProjectRole`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectRoleCreateDTO
    },
      );
    }
  


export const getPostApiProjectRoleMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProjectRole>>, TError,{data: ProjectRoleCreateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiProjectRole>>, TError,{data: ProjectRoleCreateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProjectRole>>, {data: ProjectRoleCreateDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiProjectRole(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiProjectRoleMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProjectRole>>>
    export type PostApiProjectRoleMutationBody = ProjectRoleCreateDTO
    export type PostApiProjectRoleMutationError = ErrorType<unknown>

    export const usePostApiProjectRole = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProjectRole>>, TError,{data: ProjectRoleCreateDTO}, TContext>, }
) => {

      const mutationOptions = getPostApiProjectRoleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiProjectRole = (
    projectRoleUpdateDTO: ProjectRoleUpdateDTO,
 ) => {
      
      
      return customInstance<ProjectRoleDTO>(
      {url: `/api/ProjectRole`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: projectRoleUpdateDTO
    },
      );
    }
  


export const getPutApiProjectRoleMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProjectRole>>, TError,{data: ProjectRoleUpdateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiProjectRole>>, TError,{data: ProjectRoleUpdateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiProjectRole>>, {data: ProjectRoleUpdateDTO}> = (props) => {
          const {data} = props ?? {};

          return  putApiProjectRole(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiProjectRoleMutationResult = NonNullable<Awaited<ReturnType<typeof putApiProjectRole>>>
    export type PutApiProjectRoleMutationBody = ProjectRoleUpdateDTO
    export type PutApiProjectRoleMutationError = ErrorType<unknown>

    export const usePutApiProjectRole = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProjectRole>>, TError,{data: ProjectRoleUpdateDTO}, TContext>, }
) => {

      const mutationOptions = getPutApiProjectRoleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiUserUserId = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<UserDTO>(
      {url: `/api/User/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiUserUserIdQueryKey = (userId: number,) => {
    return [`/api/User/${userId}`] as const;
    }

    
export const getGetApiUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = ErrorType<unknown>>(userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserUserId>>> = ({ signal }) => getApiUserUserId(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserUserId>>>
export type GetApiUserUserIdQueryError = ErrorType<unknown>

export const useGetApiUserUserId = <TData = Awaited<ReturnType<typeof getApiUserUserId>>, TError = ErrorType<unknown>>(
 userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserUserId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiUserUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiUser = (
    userUpdateDTO: UserUpdateDTO,
 ) => {
      
      
      return customInstance<UserDTO>(
      {url: `/api/User`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userUpdateDTO
    },
      );
    }
  


export const getPutApiUserMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUser>>, TError,{data: UserUpdateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUser>>, TError,{data: UserUpdateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUser>>, {data: UserUpdateDTO}> = (props) => {
          const {data} = props ?? {};

          return  putApiUser(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiUserMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUser>>>
    export type PutApiUserMutationBody = UserUpdateDTO
    export type PutApiUserMutationError = ErrorType<unknown>

    export const usePutApiUser = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUser>>, TError,{data: UserUpdateDTO}, TContext>, }
) => {

      const mutationOptions = getPutApiUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiUserSkills = (
    skillUpdateDTO: SkillUpdateDTO[],
 ) => {
      
      
      return customInstance<SkillDTO>(
      {url: `/api/User/skills`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: skillUpdateDTO
    },
      );
    }
  


export const getPutApiUserSkillsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserSkills>>, TError,{data: SkillUpdateDTO[]}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUserSkills>>, TError,{data: SkillUpdateDTO[]}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUserSkills>>, {data: SkillUpdateDTO[]}> = (props) => {
          const {data} = props ?? {};

          return  putApiUserSkills(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiUserSkillsMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUserSkills>>>
    export type PutApiUserSkillsMutationBody = SkillUpdateDTO[]
    export type PutApiUserSkillsMutationError = ErrorType<unknown>

    export const usePutApiUserSkills = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserSkills>>, TError,{data: SkillUpdateDTO[]}, TContext>, }
) => {

      const mutationOptions = getPutApiUserSkillsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiUserLocation = (
    userLocationUpdateDTO: UserLocationUpdateDTO,
 ) => {
      
      
      return customInstance<UserLocationDTO>(
      {url: `/api/User/location`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userLocationUpdateDTO
    },
      );
    }
  


export const getPutApiUserLocationMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserLocation>>, TError,{data: UserLocationUpdateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUserLocation>>, TError,{data: UserLocationUpdateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUserLocation>>, {data: UserLocationUpdateDTO}> = (props) => {
          const {data} = props ?? {};

          return  putApiUserLocation(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiUserLocationMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUserLocation>>>
    export type PutApiUserLocationMutationBody = UserLocationUpdateDTO
    export type PutApiUserLocationMutationError = ErrorType<unknown>

    export const usePutApiUserLocation = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserLocation>>, TError,{data: UserLocationUpdateDTO}, TContext>, }
) => {

      const mutationOptions = getPutApiUserLocationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiUserMatchingProjects = (
    userGetMatchingProjectRolesDTO: UserGetMatchingProjectRolesDTO,
 ) => {
      
      
      return customInstance<ProjectWithMatchingRolesListDTO>(
      {url: `/api/User/matching-projects`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userGetMatchingProjectRolesDTO
    },
      );
    }
  


export const getPostApiUserMatchingProjectsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserMatchingProjects>>, TError,{data: UserGetMatchingProjectRolesDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiUserMatchingProjects>>, TError,{data: UserGetMatchingProjectRolesDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserMatchingProjects>>, {data: UserGetMatchingProjectRolesDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserMatchingProjects(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiUserMatchingProjectsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserMatchingProjects>>>
    export type PostApiUserMatchingProjectsMutationBody = UserGetMatchingProjectRolesDTO
    export type PostApiUserMatchingProjectsMutationError = ErrorType<unknown>

    export const usePostApiUserMatchingProjects = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserMatchingProjects>>, TError,{data: UserGetMatchingProjectRolesDTO}, TContext>, }
) => {

      const mutationOptions = getPostApiUserMatchingProjectsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiUserPortofolio = (
    userPortofolioUpdateDTO: UserPortofolioUpdateDTO,
 ) => {
      
      
      return customInstance<UserPortofolioDTO>(
      {url: `/api/User/portofolio`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userPortofolioUpdateDTO
    },
      );
    }
  


export const getPutApiUserPortofolioMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserPortofolio>>, TError,{data: UserPortofolioUpdateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUserPortofolio>>, TError,{data: UserPortofolioUpdateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUserPortofolio>>, {data: UserPortofolioUpdateDTO}> = (props) => {
          const {data} = props ?? {};

          return  putApiUserPortofolio(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiUserPortofolioMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUserPortofolio>>>
    export type PutApiUserPortofolioMutationBody = UserPortofolioUpdateDTO
    export type PutApiUserPortofolioMutationError = ErrorType<unknown>

    export const usePutApiUserPortofolio = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserPortofolio>>, TError,{data: UserPortofolioUpdateDTO}, TContext>, }
) => {

      const mutationOptions = getPutApiUserPortofolioMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiUserPublicKey = (
    userPublicKeyUpdateDTO: UserPublicKeyUpdateDTO,
 ) => {
      
      
      return customInstance<Boolean>(
      {url: `/api/User/public-key`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userPublicKeyUpdateDTO
    },
      );
    }
  


export const getPutApiUserPublicKeyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserPublicKey>>, TError,{data: UserPublicKeyUpdateDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUserPublicKey>>, TError,{data: UserPublicKeyUpdateDTO}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUserPublicKey>>, {data: UserPublicKeyUpdateDTO}> = (props) => {
          const {data} = props ?? {};

          return  putApiUserPublicKey(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiUserPublicKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUserPublicKey>>>
    export type PutApiUserPublicKeyMutationBody = UserPublicKeyUpdateDTO
    export type PutApiUserPublicKeyMutationError = ErrorType<unknown>

    export const usePutApiUserPublicKey = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUserPublicKey>>, TError,{data: UserPublicKeyUpdateDTO}, TContext>, }
) => {

      const mutationOptions = getPutApiUserPublicKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
