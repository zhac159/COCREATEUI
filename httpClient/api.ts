/* tslint:disable */
/* eslint-disable */
/**
 * CoCreateAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'description'?: string | null;
    /**
     * 
     * @type {AssetType}
     * @memberof Asset
     */
    'assetType'?: AssetType;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'fileSrc'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    'order'?: number;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    'cost'?: number;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    'userId'?: number;
    /**
     * 
     * @type {User}
     * @memberof Asset
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'uri'?: string | null;
}


/**
 * 
 * @export
 * @interface AssetDTO
 */
export interface AssetDTO {
    /**
     * 
     * @type {number}
     * @memberof AssetDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssetDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AssetDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {AssetType}
     * @memberof AssetDTO
     */
    'assetType'?: AssetType;
    /**
     * 
     * @type {number}
     * @memberof AssetDTO
     */
    'order'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetDTO
     */
    'cost'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssetDTO
     */
    'uri'?: string | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const AssetType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type AssetType = typeof AssetType[keyof typeof AssetType];


/**
 * 
 * @export
 * @enum {string}
 */

export const FileType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type FileType = typeof FileType[keyof typeof FileType];


/**
 * 
 * @export
 * @interface LoginResponseDTO
 */
export interface LoginResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDTO
     */
    'token'?: string | null;
    /**
     * 
     * @type {UserDTO}
     * @memberof LoginResponseDTO
     */
    'user'?: UserDTO;
}
/**
 * 
 * @export
 * @interface LoginResponseDTOAPIResponse
 */
export interface LoginResponseDTOAPIResponse {
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponseDTOAPIResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {LoginResponseDTO}
     * @memberof LoginResponseDTOAPIResponse
     */
    'data'?: LoginResponseDTO;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDTOAPIResponse
     */
    'error'?: string | null;
}
/**
 * 
 * @export
 * @interface PortofolioContent
 */
export interface PortofolioContent {
    /**
     * 
     * @type {number}
     * @memberof PortofolioContent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PortofolioContent
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PortofolioContent
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PortofolioContent
     */
    'fileSrc'?: string | null;
    /**
     * 
     * @type {FileType}
     * @memberof PortofolioContent
     */
    'fileType'?: FileType;
    /**
     * 
     * @type {number}
     * @memberof PortofolioContent
     */
    'order'?: number;
    /**
     * 
     * @type {number}
     * @memberof PortofolioContent
     */
    'userId'?: number;
    /**
     * 
     * @type {User}
     * @memberof PortofolioContent
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof PortofolioContent
     */
    'uri'?: string | null;
}


/**
 * 
 * @export
 * @interface PortofolioContentDTO
 */
export interface PortofolioContentDTO {
    /**
     * 
     * @type {number}
     * @memberof PortofolioContentDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PortofolioContentDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PortofolioContentDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {FileType}
     * @memberof PortofolioContentDTO
     */
    'fileType'?: FileType;
    /**
     * 
     * @type {number}
     * @memberof PortofolioContentDTO
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof PortofolioContentDTO
     */
    'uri'?: string | null;
}


/**
 * 
 * @export
 * @interface PortofolioContentDTOAPIResponse
 */
export interface PortofolioContentDTOAPIResponse {
    /**
     * 
     * @type {boolean}
     * @memberof PortofolioContentDTOAPIResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {PortofolioContentDTO}
     * @memberof PortofolioContentDTOAPIResponse
     */
    'data'?: PortofolioContentDTO;
    /**
     * 
     * @type {string}
     * @memberof PortofolioContentDTOAPIResponse
     */
    'error'?: string | null;
}
/**
 * 
 * @export
 * @interface Review
 */
export interface Review {
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    'rating'?: number;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    'reviewerUserId'?: number;
    /**
     * 
     * @type {User}
     * @memberof Review
     */
    'reviewerUser'?: User;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    'reviewedUserId'?: number;
    /**
     * 
     * @type {User}
     * @memberof Review
     */
    'reviewedUser'?: User;
}
/**
 * 
 * @export
 * @interface Skill
 */
export interface Skill {
    /**
     * 
     * @type {number}
     * @memberof Skill
     */
    'id'?: number;
    /**
     * 
     * @type {SkillType}
     * @memberof Skill
     */
    'skillType'?: SkillType;
    /**
     * 
     * @type {string}
     * @memberof Skill
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Skill
     */
    'level'?: number;
    /**
     * 
     * @type {number}
     * @memberof Skill
     */
    'userId'?: number;
    /**
     * 
     * @type {User}
     * @memberof Skill
     */
    'user'?: User;
}


/**
 * 
 * @export
 * @interface SkillDTO
 */
export interface SkillDTO {
    /**
     * 
     * @type {number}
     * @memberof SkillDTO
     */
    'id'?: number;
    /**
     * 
     * @type {SkillType}
     * @memberof SkillDTO
     */
    'skillType'?: SkillType;
    /**
     * 
     * @type {string}
     * @memberof SkillDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SkillDTO
     */
    'level'?: number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const SkillType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15
} as const;

export type SkillType = typeof SkillType[keyof typeof SkillType];


/**
 * 
 * @export
 * @interface SkillUpdateDTO
 */
export interface SkillUpdateDTO {
    /**
     * 
     * @type {number}
     * @memberof SkillUpdateDTO
     */
    'id'?: number | null;
    /**
     * 
     * @type {SkillType}
     * @memberof SkillUpdateDTO
     */
    'skillType'?: SkillType;
    /**
     * 
     * @type {string}
     * @memberof SkillUpdateDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SkillUpdateDTO
     */
    'level'?: number;
}


/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'location'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'rating'?: number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'totalReviews'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'aboutYou'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'coins'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'profilePictureSrc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'bannerPictureSrc'?: string | null;
    /**
     * 
     * @type {Array<Skill>}
     * @memberof User
     */
    'skills'?: Array<Skill> | null;
    /**
     * 
     * @type {Array<PortofolioContent>}
     * @memberof User
     */
    'portofolioContents'?: Array<PortofolioContent> | null;
    /**
     * 
     * @type {Array<Review>}
     * @memberof User
     */
    'reviewsGiven'?: Array<Review> | null;
    /**
     * 
     * @type {Array<Review>}
     * @memberof User
     */
    'reviewsReceived'?: Array<Review> | null;
    /**
     * 
     * @type {Array<Asset>}
     * @memberof User
     */
    'assets'?: Array<Asset> | null;
}
/**
 * 
 * @export
 * @interface UserCreateDTO
 */
export interface UserCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof UserCreateDTO
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDTO
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDTO
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDTO
     */
    'location'?: string | null;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'location'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'aboutYou'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'coins'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'rating'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'totalReviews'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'profilePictureSrc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'bannerPictureSrc'?: string | null;
    /**
     * 
     * @type {Array<SkillDTO>}
     * @memberof UserDTO
     */
    'skills'?: Array<SkillDTO> | null;
    /**
     * 
     * @type {Array<PortofolioContentDTO>}
     * @memberof UserDTO
     */
    'portofolioContents'?: Array<PortofolioContentDTO> | null;
    /**
     * 
     * @type {Array<Review>}
     * @memberof UserDTO
     */
    'reviewsGiven'?: Array<Review> | null;
    /**
     * 
     * @type {Array<Review>}
     * @memberof UserDTO
     */
    'reviewsReceived'?: Array<Review> | null;
    /**
     * 
     * @type {Array<AssetDTO>}
     * @memberof UserDTO
     */
    'assets'?: Array<AssetDTO> | null;
}
/**
 * 
 * @export
 * @interface UserDTOAPIResponse
 */
export interface UserDTOAPIResponse {
    /**
     * 
     * @type {boolean}
     * @memberof UserDTOAPIResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {UserDTO}
     * @memberof UserDTOAPIResponse
     */
    'data'?: UserDTO;
    /**
     * 
     * @type {string}
     * @memberof UserDTOAPIResponse
     */
    'error'?: string | null;
}
/**
 * 
 * @export
 * @interface UserLoginDTO
 */
export interface UserLoginDTO {
    /**
     * 
     * @type {string}
     * @memberof UserLoginDTO
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserLoginDTO
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface UserUpdateDTO
 */
export interface UserUpdateDTO {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'aboutYou'?: string | null;
    /**
     * 
     * @type {Array<SkillUpdateDTO>}
     * @memberof UserUpdateDTO
     */
    'skills'?: Array<SkillUpdateDTO> | null;
}

/**
 * AssetApi - axios parameter creator
 * @export
 */
export const AssetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAssetIdDelete', 'id', id)
            const localVarPath = `/api/Asset/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [assetName] 
         * @param {string} [assetDescription] 
         * @param {AssetType} [assetAssetType] 
         * @param {number} [assetOrder] 
         * @param {number} [assetCost] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetPost: async (assetName?: string, assetDescription?: string, assetAssetType?: AssetType, assetOrder?: number, assetCost?: number, mediaFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (assetName !== undefined) {
                localVarQueryParameter['Asset.Name'] = assetName;
            }

            if (assetDescription !== undefined) {
                localVarQueryParameter['Asset.Description'] = assetDescription;
            }

            if (assetAssetType !== undefined) {
                localVarQueryParameter['Asset.AssetType'] = assetAssetType;
            }

            if (assetOrder !== undefined) {
                localVarQueryParameter['Asset.Order'] = assetOrder;
            }

            if (assetCost !== undefined) {
                localVarQueryParameter['Asset.Cost'] = assetCost;
            }


            if (mediaFile !== undefined) { 
                localVarFormParams.append('MediaFile', mediaFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [assetUpdateDTOId] 
         * @param {string} [assetUpdateDTOName] 
         * @param {string} [assetUpdateDTODescription] 
         * @param {AssetType} [assetUpdateDTOAssetType] 
         * @param {number} [assetUpdateDTOOrder] 
         * @param {number} [assetUpdateDTOCost] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetPut: async (assetUpdateDTOId?: number, assetUpdateDTOName?: string, assetUpdateDTODescription?: string, assetUpdateDTOAssetType?: AssetType, assetUpdateDTOOrder?: number, assetUpdateDTOCost?: number, mediaFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (assetUpdateDTOId !== undefined) {
                localVarQueryParameter['AssetUpdateDTO.Id'] = assetUpdateDTOId;
            }

            if (assetUpdateDTOName !== undefined) {
                localVarQueryParameter['AssetUpdateDTO.Name'] = assetUpdateDTOName;
            }

            if (assetUpdateDTODescription !== undefined) {
                localVarQueryParameter['AssetUpdateDTO.Description'] = assetUpdateDTODescription;
            }

            if (assetUpdateDTOAssetType !== undefined) {
                localVarQueryParameter['AssetUpdateDTO.AssetType'] = assetUpdateDTOAssetType;
            }

            if (assetUpdateDTOOrder !== undefined) {
                localVarQueryParameter['AssetUpdateDTO.Order'] = assetUpdateDTOOrder;
            }

            if (assetUpdateDTOCost !== undefined) {
                localVarQueryParameter['AssetUpdateDTO.Cost'] = assetUpdateDTOCost;
            }


            if (mediaFile !== undefined) { 
                localVarFormParams.append('MediaFile', mediaFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetApi - functional programming interface
 * @export
 */
export const AssetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetIdDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AssetApi.apiAssetIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [assetName] 
         * @param {string} [assetDescription] 
         * @param {AssetType} [assetAssetType] 
         * @param {number} [assetOrder] 
         * @param {number} [assetCost] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetPost(assetName?: string, assetDescription?: string, assetAssetType?: AssetType, assetOrder?: number, assetCost?: number, mediaFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetPost(assetName, assetDescription, assetAssetType, assetOrder, assetCost, mediaFile, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AssetApi.apiAssetPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [assetUpdateDTOId] 
         * @param {string} [assetUpdateDTOName] 
         * @param {string} [assetUpdateDTODescription] 
         * @param {AssetType} [assetUpdateDTOAssetType] 
         * @param {number} [assetUpdateDTOOrder] 
         * @param {number} [assetUpdateDTOCost] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetPut(assetUpdateDTOId?: number, assetUpdateDTOName?: string, assetUpdateDTODescription?: string, assetUpdateDTOAssetType?: AssetType, assetUpdateDTOOrder?: number, assetUpdateDTOCost?: number, mediaFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetPut(assetUpdateDTOId, assetUpdateDTOName, assetUpdateDTODescription, assetUpdateDTOAssetType, assetUpdateDTOOrder, assetUpdateDTOCost, mediaFile, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AssetApi.apiAssetPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AssetApi - factory interface
 * @export
 */
export const AssetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiAssetIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [assetName] 
         * @param {string} [assetDescription] 
         * @param {AssetType} [assetAssetType] 
         * @param {number} [assetOrder] 
         * @param {number} [assetCost] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetPost(assetName?: string, assetDescription?: string, assetAssetType?: AssetType, assetOrder?: number, assetCost?: number, mediaFile?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiAssetPost(assetName, assetDescription, assetAssetType, assetOrder, assetCost, mediaFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [assetUpdateDTOId] 
         * @param {string} [assetUpdateDTOName] 
         * @param {string} [assetUpdateDTODescription] 
         * @param {AssetType} [assetUpdateDTOAssetType] 
         * @param {number} [assetUpdateDTOOrder] 
         * @param {number} [assetUpdateDTOCost] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetPut(assetUpdateDTOId?: number, assetUpdateDTOName?: string, assetUpdateDTODescription?: string, assetUpdateDTOAssetType?: AssetType, assetUpdateDTOOrder?: number, assetUpdateDTOCost?: number, mediaFile?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiAssetPut(assetUpdateDTOId, assetUpdateDTOName, assetUpdateDTODescription, assetUpdateDTOAssetType, assetUpdateDTOOrder, assetUpdateDTOCost, mediaFile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetApi - object-oriented interface
 * @export
 * @class AssetApi
 * @extends {BaseAPI}
 */
export class AssetApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public apiAssetIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).apiAssetIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [assetName] 
     * @param {string} [assetDescription] 
     * @param {AssetType} [assetAssetType] 
     * @param {number} [assetOrder] 
     * @param {number} [assetCost] 
     * @param {File} [mediaFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public apiAssetPost(assetName?: string, assetDescription?: string, assetAssetType?: AssetType, assetOrder?: number, assetCost?: number, mediaFile?: File, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).apiAssetPost(assetName, assetDescription, assetAssetType, assetOrder, assetCost, mediaFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [assetUpdateDTOId] 
     * @param {string} [assetUpdateDTOName] 
     * @param {string} [assetUpdateDTODescription] 
     * @param {AssetType} [assetUpdateDTOAssetType] 
     * @param {number} [assetUpdateDTOOrder] 
     * @param {number} [assetUpdateDTOCost] 
     * @param {File} [mediaFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public apiAssetPut(assetUpdateDTOId?: number, assetUpdateDTOName?: string, assetUpdateDTODescription?: string, assetUpdateDTOAssetType?: AssetType, assetUpdateDTOOrder?: number, assetUpdateDTOCost?: number, mediaFile?: File, options?: RawAxiosRequestConfig) {
        return AssetApiFp(this.configuration).apiAssetPut(assetUpdateDTOId, assetUpdateDTOName, assetUpdateDTODescription, assetUpdateDTOAssetType, assetUpdateDTOOrder, assetUpdateDTOCost, mediaFile, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserLoginDTO} [userLoginDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginPost: async (userLoginDTO?: UserLoginDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCreateDTO} [userCreateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginRegisterPost: async (userCreateDTO?: UserCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserLoginDTO} [userLoginDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginPost(userLoginDTO?: UserLoginDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDTOAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginPost(userLoginDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LoginApi.apiLoginPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UserCreateDTO} [userCreateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginRegisterPost(userCreateDTO?: UserCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDTOAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginRegisterPost(userCreateDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LoginApi.apiLoginRegisterPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {UserLoginDTO} [userLoginDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginPost(userLoginDTO?: UserLoginDTO, options?: any): AxiosPromise<LoginResponseDTOAPIResponse> {
            return localVarFp.apiLoginPost(userLoginDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserCreateDTO} [userCreateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginRegisterPost(userCreateDTO?: UserCreateDTO, options?: any): AxiosPromise<LoginResponseDTOAPIResponse> {
            return localVarFp.apiLoginRegisterPost(userCreateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {UserLoginDTO} [userLoginDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginPost(userLoginDTO?: UserLoginDTO, options?: RawAxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiLoginPost(userLoginDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserCreateDTO} [userCreateDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginRegisterPost(userCreateDTO?: UserCreateDTO, options?: RawAxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiLoginRegisterPost(userCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PortofolioContentApi - axios parameter creator
 * @export
 */
export const PortofolioContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPortofolioContentIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPortofolioContentIdDelete', 'id', id)
            const localVarPath = `/api/PortofolioContent/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [portofolioContentDescription] 
         * @param {string} [portofolioContentName] 
         * @param {FileType} [portofolioContentFileType] 
         * @param {number} [portofolioContentOrder] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPortofolioContentPost: async (portofolioContentDescription?: string, portofolioContentName?: string, portofolioContentFileType?: FileType, portofolioContentOrder?: number, mediaFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PortofolioContent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (portofolioContentDescription !== undefined) { 
                localVarFormParams.append('PortofolioContent.Description', portofolioContentDescription as any);
            }
    
            if (portofolioContentName !== undefined) { 
                localVarFormParams.append('PortofolioContent.Name', portofolioContentName as any);
            }
    
            if (portofolioContentFileType !== undefined) { 
                localVarFormParams.append('PortofolioContent.FileType', portofolioContentFileType as any);
            }
    
            if (portofolioContentOrder !== undefined) { 
                localVarFormParams.append('PortofolioContent.Order', portofolioContentOrder as any);
            }
    
            if (mediaFile !== undefined) { 
                localVarFormParams.append('MediaFile', mediaFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [portofolioContentUpdateDTOId] 
         * @param {string} [portofolioContentUpdateDTODescription] 
         * @param {string} [portofolioContentUpdateDTOName] 
         * @param {FileType} [portofolioContentUpdateDTOFileType] 
         * @param {number} [portofolioContentUpdateDTOOrder] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPortofolioContentPut: async (portofolioContentUpdateDTOId?: number, portofolioContentUpdateDTODescription?: string, portofolioContentUpdateDTOName?: string, portofolioContentUpdateDTOFileType?: FileType, portofolioContentUpdateDTOOrder?: number, mediaFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PortofolioContent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (portofolioContentUpdateDTOId !== undefined) {
                localVarQueryParameter['PortofolioContentUpdateDTO.Id'] = portofolioContentUpdateDTOId;
            }

            if (portofolioContentUpdateDTODescription !== undefined) {
                localVarQueryParameter['PortofolioContentUpdateDTO.Description'] = portofolioContentUpdateDTODescription;
            }

            if (portofolioContentUpdateDTOName !== undefined) {
                localVarQueryParameter['PortofolioContentUpdateDTO.Name'] = portofolioContentUpdateDTOName;
            }

            if (portofolioContentUpdateDTOFileType !== undefined) {
                localVarQueryParameter['PortofolioContentUpdateDTO.FileType'] = portofolioContentUpdateDTOFileType;
            }

            if (portofolioContentUpdateDTOOrder !== undefined) {
                localVarQueryParameter['PortofolioContentUpdateDTO.Order'] = portofolioContentUpdateDTOOrder;
            }


            if (mediaFile !== undefined) { 
                localVarFormParams.append('MediaFile', mediaFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortofolioContentApi - functional programming interface
 * @export
 */
export const PortofolioContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortofolioContentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPortofolioContentIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPortofolioContentIdDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortofolioContentApi.apiPortofolioContentIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [portofolioContentDescription] 
         * @param {string} [portofolioContentName] 
         * @param {FileType} [portofolioContentFileType] 
         * @param {number} [portofolioContentOrder] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPortofolioContentPost(portofolioContentDescription?: string, portofolioContentName?: string, portofolioContentFileType?: FileType, portofolioContentOrder?: number, mediaFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortofolioContentDTOAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPortofolioContentPost(portofolioContentDescription, portofolioContentName, portofolioContentFileType, portofolioContentOrder, mediaFile, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortofolioContentApi.apiPortofolioContentPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [portofolioContentUpdateDTOId] 
         * @param {string} [portofolioContentUpdateDTODescription] 
         * @param {string} [portofolioContentUpdateDTOName] 
         * @param {FileType} [portofolioContentUpdateDTOFileType] 
         * @param {number} [portofolioContentUpdateDTOOrder] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPortofolioContentPut(portofolioContentUpdateDTOId?: number, portofolioContentUpdateDTODescription?: string, portofolioContentUpdateDTOName?: string, portofolioContentUpdateDTOFileType?: FileType, portofolioContentUpdateDTOOrder?: number, mediaFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPortofolioContentPut(portofolioContentUpdateDTOId, portofolioContentUpdateDTODescription, portofolioContentUpdateDTOName, portofolioContentUpdateDTOFileType, portofolioContentUpdateDTOOrder, mediaFile, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortofolioContentApi.apiPortofolioContentPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PortofolioContentApi - factory interface
 * @export
 */
export const PortofolioContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortofolioContentApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPortofolioContentIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiPortofolioContentIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [portofolioContentDescription] 
         * @param {string} [portofolioContentName] 
         * @param {FileType} [portofolioContentFileType] 
         * @param {number} [portofolioContentOrder] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPortofolioContentPost(portofolioContentDescription?: string, portofolioContentName?: string, portofolioContentFileType?: FileType, portofolioContentOrder?: number, mediaFile?: File, options?: any): AxiosPromise<PortofolioContentDTOAPIResponse> {
            return localVarFp.apiPortofolioContentPost(portofolioContentDescription, portofolioContentName, portofolioContentFileType, portofolioContentOrder, mediaFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [portofolioContentUpdateDTOId] 
         * @param {string} [portofolioContentUpdateDTODescription] 
         * @param {string} [portofolioContentUpdateDTOName] 
         * @param {FileType} [portofolioContentUpdateDTOFileType] 
         * @param {number} [portofolioContentUpdateDTOOrder] 
         * @param {File} [mediaFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPortofolioContentPut(portofolioContentUpdateDTOId?: number, portofolioContentUpdateDTODescription?: string, portofolioContentUpdateDTOName?: string, portofolioContentUpdateDTOFileType?: FileType, portofolioContentUpdateDTOOrder?: number, mediaFile?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiPortofolioContentPut(portofolioContentUpdateDTOId, portofolioContentUpdateDTODescription, portofolioContentUpdateDTOName, portofolioContentUpdateDTOFileType, portofolioContentUpdateDTOOrder, mediaFile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PortofolioContentApi - object-oriented interface
 * @export
 * @class PortofolioContentApi
 * @extends {BaseAPI}
 */
export class PortofolioContentApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortofolioContentApi
     */
    public apiPortofolioContentIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return PortofolioContentApiFp(this.configuration).apiPortofolioContentIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [portofolioContentDescription] 
     * @param {string} [portofolioContentName] 
     * @param {FileType} [portofolioContentFileType] 
     * @param {number} [portofolioContentOrder] 
     * @param {File} [mediaFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortofolioContentApi
     */
    public apiPortofolioContentPost(portofolioContentDescription?: string, portofolioContentName?: string, portofolioContentFileType?: FileType, portofolioContentOrder?: number, mediaFile?: File, options?: RawAxiosRequestConfig) {
        return PortofolioContentApiFp(this.configuration).apiPortofolioContentPost(portofolioContentDescription, portofolioContentName, portofolioContentFileType, portofolioContentOrder, mediaFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [portofolioContentUpdateDTOId] 
     * @param {string} [portofolioContentUpdateDTODescription] 
     * @param {string} [portofolioContentUpdateDTOName] 
     * @param {FileType} [portofolioContentUpdateDTOFileType] 
     * @param {number} [portofolioContentUpdateDTOOrder] 
     * @param {File} [mediaFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortofolioContentApi
     */
    public apiPortofolioContentPut(portofolioContentUpdateDTOId?: number, portofolioContentUpdateDTODescription?: string, portofolioContentUpdateDTOName?: string, portofolioContentUpdateDTOFileType?: FileType, portofolioContentUpdateDTOOrder?: number, mediaFile?: File, options?: RawAxiosRequestConfig) {
        return PortofolioContentApiFp(this.configuration).apiPortofolioContentPut(portofolioContentUpdateDTOId, portofolioContentUpdateDTODescription, portofolioContentUpdateDTOName, portofolioContentUpdateDTOFileType, portofolioContentUpdateDTOOrder, mediaFile, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserUpdateDTO} [userUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPut: async (userUpdateDTO?: UserUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserIdGet: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUserUserIdGet', 'userId', userId)
            const localVarPath = `/api/User/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserUpdateDTO} [userUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserPut(userUpdateDTO?: UserUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserPut(userUpdateDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.apiUserPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserUserIdGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOAPIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUserIdGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserApi.apiUserUserIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {UserUpdateDTO} [userUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserPut(userUpdateDTO?: UserUpdateDTO, options?: any): AxiosPromise<UserDTOAPIResponse> {
            return localVarFp.apiUserPut(userUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserIdGet(userId: number, options?: any): AxiosPromise<UserDTOAPIResponse> {
            return localVarFp.apiUserUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserUpdateDTO} [userUpdateDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserPut(userUpdateDTO?: UserUpdateDTO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserPut(userUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserUserIdGet(userId: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



